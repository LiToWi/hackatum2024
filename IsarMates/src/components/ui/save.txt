export function UiLayout({ children, links }: { children: ReactNode; links: { label: string; path: string }[] }) {
  const pathname = usePathname()
  // new ??
  const [showAccountMenu, setShowAccountMenu] = React.useState(false)

  return (
    <div className="h-full flex flex-col">
      <div className="navbar bg-base-300 text-neutral-content flex-col md:flex-row space-y-2 md:space-y-0">
        <div className="flex-1">
          <Link className="btn btn-ghost normal-case text-xl" href="/">
            {/* Inserted picture "Logo" */}
            <img className="h-4 md:h-6" alt="Logo" src="/logos/Logo.png" />
          </Link>
          {/* Inserted text "IsarMates" */}
          <span className="ml-2 text-xl font-semibold">IsarMates</span>
          <ul className="menu menu-horizontal px-1 space-x-2">
            {links.map(({ label, path }) => (
              <li key={path}>
                <Link className={pathname.startsWith(path) ? 'active' : ''} href={path}>
                  {label}
                </Link>
              </li>
            ))}
          </ul>
        </div>
        <div className="flex-none flex items-center space-x-2 ml-auto">
          
          {/* Inserted Account Button with Dropdown */}
        
        
          <WalletButton />
        

          <div className="dropdown dropdown-end">
            <button
              className="btn btn-primary"
              onClick={() => setShowAccountMenu(!showAccountMenu)}
            >
              Account
            </button>
            {showAccountMenu && (
              <ul tabIndex={0} className="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-32">
                {/*
                <li>
                  <Link href="/wallet">
                    <button className="btn btn-xs lg:btn-md btn-outline">
                      Select Wallet
                    </button>
                  </Link>
                </li>
                */}
                <li>
                  <Link href="/events">
                    <button className="btn btn-xs lg:btn-md btn-outline">
                      Events
                    </button>
                  </Link>
                </li>
                <li>
                  <Link href="/profile">
                    <button className="btn btn-xs lg:btn-md btn-outline">
                      Profile
                    </button>
                  </Link>
                </li>
              </ul>
            )}
          </div>

          <Link href="/events">
            <button className="btn btn-secondary">Create Event</button>
          </Link>
        </div>
      </div>
      <ClusterChecker>
        <AccountChecker />
      </ClusterChecker>
      <div className="flex-grow mx-4 lg:mx-auto">
        <Suspense
          fallback={
            <div className="text-center my-32">
              <span className="loading loading-spinner loading-lg"></span>
            </div>
          }
        >
          {children}
        </Suspense>
        <Toaster position="bottom-right" />
      </div>
      <footer className="footer footer-center p-4 bg-base-300 text-base-content">
        <aside>
          <p>
            {/* Link hover => for acc menu?!*/}
            {/*
            Generated by{' '}
            <a
              className="link hover:text-white"
              href="https://github.com/solana-developers/create-solana-dapp"
              target="_blank"
              rel="noopener noreferrer"
            >
              create-solana-dapp
            </a>
            */}
            IsarMate by Oskar, Mika, Linus and Fabian for HackaTUM2024
          </p>
        </aside>
      </footer>
    </div>
  )
}